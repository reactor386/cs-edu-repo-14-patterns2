//-
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.IO;

using YoutubeExplode;
using YoutubeExplode.Converter;
using YoutubeExplode.Utils;
using YoutubeExplode.Utils.Extensions;
using YoutubeExplode.Videos.Streams;


namespace YoutubeExplodeExploiter.App;

/// <summary>
/// Обработчик команд, выполняющий непосредственное
///  взаимодействие с YoutubeExplode
/// </summary>
public class YoutubeOperator
{
    YoutubeClient _youtubeClient = new YoutubeClient();

    /// <summary>
    /// Метод обращения к асинхронной функции
    /// </summary>
    /// <param name="videoUrl">ссылка на видео</param>
    /// <returns>словарь с полученными значениями</returns>
    public Dictionary<string, string> GetVideoInfo(string videoUrl)
    {
        Dictionary<string, string> res = GetVideoInfoAsync(videoUrl).Result;

        return res;
    }

    /// <summary>
    /// Метод обращения к асинхронной функции
    /// </summary>
    /// <param name="videoUrl">ссылка на видео</param>
    /// <param name="outputFilePath">путь до скачиваемого файла</param>
    /// <returns>true, в случае успешного скачивания</returns>
    public bool GetVideoContent(string videoUrl, string outputFilePath)
    {
        bool res = GetVideoContentAsync(videoUrl, outputFilePath).Result;

        return res;
    }

    /// <summary>
    /// Асинхронный метод получения информации о видео
    /// </summary>
    /// <param name="videoUrl">ссылка на видео</param>
    /// <returns>словарь с полученными значениями</returns>
    private async Task<Dictionary<string, string>> GetVideoInfoAsync(string videoUrl)
    {
        Dictionary<string, string> res = [];

        YoutubeExplode.Videos.Video? videoSpecs = null;
        try
        {
            videoSpecs = await _youtubeClient.Videos.GetAsync(videoUrl);
        }
        catch (Exception e)
        {
            Console.WriteLine($"В ходе работы возникла ошибка: {e.Message}");
        }

        if (videoSpecs != null)
        {
            res.TryAdd("url", $"{videoUrl}");
            res.TryAdd("ID", $"{videoSpecs.Id}");
            res.TryAdd("Author", $"{videoSpecs.Author.ChannelTitle}");
            res.TryAdd("Title", $"{videoSpecs.Title}");
            res.TryAdd("Duration", $"{videoSpecs.Duration}");
            res.TryAdd("Description", $"{videoSpecs.Description}");
        }

        return res;
    }

    /// <summary>
    /// Асинхронный метод скачивания видео
    /// </summary>
    /// <param name="videoUrl">ссылка на видео</param>
    /// <param name="outputFilePath">путь до скачиваемого файла</param>
    /// <returns>true, в случае успешного скачивания</returns>
    private async Task<bool> GetVideoContentAsync(string videoUrl, string outputFilePath)
    {
        bool res;

        if (File.Exists(outputFilePath))
        {
            File.Delete(outputFilePath);
        }

        try
        {
            await _youtubeClient.Videos.DownloadAsync(videoUrl, outputFilePath,
                builder => builder.SetPreset(ConversionPreset.UltraFast));
        }
        catch (Exception e)
        {
            Console.WriteLine($"В ходе работы возникла ошибка: {e.Message}");
        }

        res = File.Exists(outputFilePath);
        return res;
    }
}
